import logging
from sensor.sensor import SensorEncoder
from msp.response_encoder import MspResponseEncoder

from msp.request_decoder import MspRequestDecoder, MspError
from sport.frame import FrameId, FrameEncoder
from sport.physical_id import PhysicalId
from util.util import loop

_logger = logging.getLogger("exchange")


class SportCoordinator:
    _DEFAULT_TRANSMIT_ID = PhysicalId.ID27
    _DEFAULT_RECEIVE_ID = PhysicalId.ID13

    def __init__(self, pumper, transmit_id=_DEFAULT_TRANSMIT_ID, receive_id=_DEFAULT_RECEIVE_ID):
        pumper.add_publisher(transmit_id, self._write_frame)
        pumper.add_subscriber(receive_id, self._receive)
        self._msp_request_decoder = MspRequestDecoder()
        self._msp_response_encoder = MspResponseEncoder()
        self._msp_response_buffer = MspResponseEncoder.create_response_buffer()
        self._send_msp_response = False
        self._sensors = None
        self._commands = {}

    def set_sensors(self, sensors):
        self._sensors = (sensors[i] for i in loop(len(sensors)))

    def set_commands(self, commands):
        self._commands = commands

    # If there's MSP response data to send then send it, otherwise send sensor data.
    def _write_frame(self, frame):
        if self._send_msp_response:
            self._send_msp_response = self._msp_response_encoder.encode(frame)
            return True
        elif self._sensors:
            SensorEncoder.encode(next(self._sensors), frame)
            return True
        return False

    def _receive(self, frame):
        if frame.get_id() != FrameId.MSP_CLIENT:
            _logger.warning("ignoring frame with ID 0x%02X", frame.get_id())
            return

        if self._send_msp_response:
            _logger.warning("MSP frame received while still sending previous response - discarding old response")
            self._send_msp_response = False

        request = self._msp_request_decoder.decode(frame.payload)

        if request:
            self._handle_msp_request(request)

    def _handle_msp_request(self, request):
        # A complete MSP request has been received - now to create the response...
        self._send_msp_response = True

        # There was something basic wrong with the request.
        if request.error is not None:
            self._msp_response_encoder.set_error(request.error, request.command_id)
            return

        command = self._commands.get(request.command_id)

        # We don't know how to handle this command.
        if command is None:
            _logger.error("no handler registered for command %d", request.command_id)
            self._msp_response_encoder.set_error(MspError.ERROR, request.command_id)
            return

        # Create a response to the command, including the payload generated by the command handler.
        self._msp_response_buffer.reset_offset()
        command.handle_request(request.payload, self._msp_response_buffer)
        self._msp_response_encoder.set_command(command.id, self._msp_response_buffer.get_buffer())
